From dd6da51442754912201b2675f05c2356c2ad7c76 Mon Sep 17 00:00:00 2001
From: unknown <santosh.2@iitj.ac.in>
Date: Thu, 8 Sep 2022 09:31:21 +0530
Subject: [PATCH] Development environment setup guide

---
 README.md            |  13 +++++
 docs/dev_install.md  | 119 +++++++++++++++++++++++++++++++++++++++++++
 loader/sql/table.sql |  87 +++++++++++++++++++++++++++++++
 requirements.txt     |   4 ++
 4 files changed, 223 insertions(+)
 create mode 100644 README.md
 create mode 100644 docs/dev_install.md
 create mode 100644 loader/sql/table.sql
 create mode 100644 requirements.txt

diff --git a/README.md b/README.md
new file mode 100644
index 0000000..39d7858
--- /dev/null
+++ b/README.md
@@ -0,0 +1,13 @@
+# The Pgarchives website
+The code in this repository is for handling the PostgreSQL mailinglist archives
+
+# Technology
+The website code is written in [Python](https://www.python.org/) using the [Django](https://www.djangoproject.com/) framework. Not surprisingly, [PostgreSQL](https://www.postgresql.org/) is used as the database.
+
+The website also uses the [Bootstrap](https://getbootstrap.com/docs/4.0/getting-started/introduction/) CSS framework, [Bootstrap Table](https://bootstrap-table.com/) an extended version of Table component of Bootstrap and [Font Awesome](https://fontawesome.com/v4/icons/) icon library.
+
+# Contributing
+We appreciate all (most?) contributions to this project. If you wish to contribute, be sure to sign up to the [pgsql-www](https://www.postgresql.org/list/) mailinglist for any discussions, and post any suggested patches there. If you want to make any major changes, be sure to have discussed those on the list first.
+
+### Setting up a local instance
+To set up a local instance for testing or building patches, please see the [docs/dev_install.md]() document.
\ No newline at end of file
diff --git a/docs/dev_install.md b/docs/dev_install.md
new file mode 100644
index 0000000..86f2d77
--- /dev/null
+++ b/docs/dev_install.md
@@ -0,0 +1,119 @@
+# Development install
+
+### Requirements:
+
+- Python 3 (tested with version 3.7)
+- Django 3.2
+- PostgreSQL (tested with version 13, but should work fine with anything newer)
+- NGINX
+- Other dependencies in requirements.txt
+
+### Procedure:
+- Navigate to the cloned repository
+
+    ```
+    cd <project_directory_name>     #   pgarchives
+    ```
+- Create a new virtual environment and activate it
+    ```
+    sudo apt-get install -y python3-venv
+    python3 -m venv env
+    source env/bin/activate
+    ```
+- Use pip to install other dependencies from `requirements.txt`
+    ```
+    sudo pip install -r requirements.txt
+    ```
+- Start PostgreSQL server
+    ```
+    sudo service postgresql start
+    ```
+- Create a database in your PostgreSQL called `archives` (other names are of course possible, but that's the standard one)
+    ```
+    sudo -u postgres psql
+    create database archives;
+    ```
+    
+-   Provide following details in the [settings.py](/django/archives/settings.py) file
+    ```
+      DATABASES = {
+          'default': {
+              'ENGINE': 'django.db.backends.postgresql_psycopg2',  # Add 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
+              'NAME': 'archives',                      # Or path to database file if using sqlite3.
+              'USER': '',                      # Not used with sqlite3.
+              'PASSWORD': '',                  # Not used with sqlite3.
+              'HOST': '',                      # Set to empty string for localhost. Not used with sqlite3.
+              'PORT': '',                      # Set to empty string for default. Not used with sqlite3.
+          }
+      }
+    ```
+    
+    Add `ALLOWED_HOSTS = ['127.0.0.1', 'localhost']`
+    
+    To display public data that doesn't require authentication. Change `PUBLIC_ARCHIVES=True`
+    
+    (Otherwise, you must also set up a Pgweb project and connect them to authenticate users.)
+- Select archives database and create tables using **table.sql**
+    ```
+    \c archives
+    ```
+    Copy SQL queries from [table.sql](/loader/sql) file and paste in the postgres shell
+    
+- Insert sample data
+    In the same postgres shell, execute below insert queries
+    ```
+    INSERT INTO listgroups (groupid, groupname, sortkey) VALUES (1, 'Developer lists', 1);
+    INSERT INTO lists (listid, listname, shortdesc, description, active, groupid, subscriber_access) VALUES (1, 'pgsql-hackers', 'pgsql-hackers', 'The PostgreSQL developers team lives here. Discussion of current development issues, problems and bugs, and proposed new features. If your question cannot be answered by people in the other lists, and it is likely that only a developer will know the answer, you may re-post your question in this list. You must try elsewhere first!', True, 1,   True);
+    ```
+    Close the postgres shell and switch to postgres user
+    ```
+    sudo su postgres
+    ```
+    Copy archives.ini.sample as archives.ini and provide database name (Default = archives)
+    
+    Navigate to `/loader` directory and execute `load_message.py` 
+    ```
+    python3 load_message.py -l pgsql-hackers -m pgsql-hackers.202207
+    ```
+
+- Navigate to `/django` directory and run the server
+    ```
+    python3 manage.py runserver 8000
+    ```
+
+    After running the above command, you will see that the Django server is running at [http://127.0.0.1:8000](http://127.0.0.1:8000/)
+
+    If you open the above URL in the browser you will see that CSS/JS files are not loaded properly. To resolve this, we need to use Nginx. It works as a reverse proxy and helps to serve staticfiles on its own.
+
+- Open new terminal, install Nginx, create config file `pgarchives.conf` inside `/etc/nginx/sites-enabled` and add the following code snippet in the file
+    ```
+        server {
+            listen 88;
+            listen [::]:88;
+            server_name localhost;
+            location / {
+                proxy_pass http://127.0.0.1:8000;
+                proxy_http_version 1.1;
+                proxy_set_header Upgrade $http_upgrade;
+                proxy_set_header Connection 'upgrade';
+                proxy_set_header Host $host;
+                proxy_cache_bypass $http_upgrade;
+            }
+             location /media-archives/ {
+                autoindex on;
+                alias /path_to_pgarchives_media_directory/;
+            }
+        }
+    ```
+
+    For the **<path_to_pgarchives_media_directory>**, go inside the media directory of pgarchives and enter `pwd`
+
+- Create symbolic link
+    ```
+    sudo ln -s /etc/nginx/sites-available/pgarchives.conf /etc/nginx/sites-enabled/
+    ```
+- Start Nginx service
+    ```
+    sudo service nginx start
+    ```
+- Open http://127.0.0.1:88/ in the browser
\ No newline at end of file
diff --git a/loader/sql/table.sql b/loader/sql/table.sql
new file mode 100644
index 0000000..e0ac739
--- /dev/null
+++ b/loader/sql/table.sql
@@ -0,0 +1,87 @@
+CREATE TABLE messages (
+   id SERIAL NOT NULL PRIMARY KEY,
+   parentid int REFERENCES messages,
+   threadid int NOT NULL,
+   _from text NOT NULL,
+   _to text NOT NULL,
+   cc text NOT NULL,
+   subject text NOT NULL,
+   date timestamptz NOT NULL,
+   loaddate timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
+   has_attachment boolean NOT NULL,
+   hiddenstatus int NULL,
+   messageid text NOT NULL,
+   bodytxt text NOT NULL,
+   rawtxt bytea NOT NULL
+);
+CREATE INDEX idx_messages_threadid ON messages(threadid);
+CREATE UNIQUE INDEX idx_messages_msgid ON messages(messageid);
+CREATE INDEX idx_messages_date ON messages(date);
+CREATE INDEX idx_messages_parentid ON messages(parentid);
+
+CREATE TABLE message_hide_reasons (
+   message int NOT NULL PRIMARY KEY REFERENCES messages,
+   dt timestamptz,
+   reason text,
+   by text
+);
+
+CREATE SEQUENCE threadid_seq;
+
+CREATE TABLE unresolved_messages(
+   message int NOT NULL REFERENCES messages,
+   priority int NOT NULL,
+   msgid text NOT NULL,
+   CONSTRAINT unresolved_messages_pkey PRIMARY KEY (message, priority)
+);
+
+CREATE UNIQUE INDEX idx_unresolved_msgid_message ON unresolved_messages(msgid, message);
+
+CREATE TABLE listgroups(
+   groupid int NOT NULL PRIMARY KEY,
+   groupname text NOT NULL UNIQUE,
+   sortkey int NOT NULL
+);
+
+CREATE TABLE lists(
+   listid int NOT NULL PRIMARY KEY,
+   listname text NOT NULL UNIQUE,
+   shortdesc text NOT NULL,
+   description text NOT NULL,
+   active boolean NOT NULL,
+   subscriber_access boolean NOT NULL,
+   groupid int NOT NULL REFERENCES listgroups(groupid)
+);
+
+CREATE TABLE list_months(
+   listid int NOT NULL REFERENCES lists(listid),
+   year int NOT NULL,
+   month int NOT NULL,
+   CONSTRAINT list_months_pk PRIMARY KEY (listid, year, month)
+);
+
+CREATE TABLE list_threads(
+   threadid int NOT NULL, /* comes from threadid_seq */
+   listid int NOT NULL REFERENCES lists(listid),
+   CONSTRAINT pg_list_threads PRIMARY KEY (threadid, listid)
+);
+CREATE INDEX list_threads_listid_idx ON list_threads(listid);
+
+CREATE TABLE attachments(
+   id serial not null primary key,
+   message int not null references messages(id),
+   filename text not null,
+   contenttype text not null,
+   attachment bytea not null
+);
+CREATE INDEX idx_attachments_msg ON attachments(message);
+
+CREATE TABLE loaderrors(
+   id SERIAL NOT NULL PRIMARY KEY,
+   listid int NOT NULL,
+   dat timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
+   msgid text NOT NULL,
+   srctype text NOT NULL,
+   src text NOT NULL,
+   err text NOT NULL
+);
\ No newline at end of file
diff --git a/requirements.txt b/requirements.txt
new file mode 100644
index 0000000..7319741
--- /dev/null
+++ b/requirements.txt
@@ -0,0 +1,4 @@
+Django==3.2.13
+psycopg2-binary==2.9.3
+pycryptodomex==3.15.0
+requests==2.28.1
\ No newline at end of file
-- 
2.26.2.windows.1

